import logging
import os
import re
import shutil
import subprocess
import sys
import time
import yt_dlp
from typing import Dict, Optional


class Tcolors:
    cyan = '\033[96m'
    green = '\033[92m'
    yellow = '\033[93m'
    red = '\033[91m'
    gray = '\033[90m'
    clear = '\033[0m'
    underline = '\033[4m'
    bold = '\033[1m'


class LoggerManager:
    def __init__(self, log_level=logging.INFO):
        self.logger = logging.getLogger(__name__)
        self.configure_logging(log_level)

    def configure_logging(self, log_level):
        logging.basicConfig(level=log_level, format='%(asctime)s - %(levelname)s - %(message)s')

    def get_logger(self):
        return self.logger


class FileManager:
    FILE_EXTENSIONS = ('.webp', '.png', '.jpg', '.jpeg')

    @staticmethod
    def sanitize_file_path(file_path: str) -> str:
        return os.path.normpath(file_path)

    @staticmethod
    def move_thumbnails(source_folder: str, destination_folder: str) -> None:
        os.makedirs(destination_folder, exist_ok=True)
        files_to_move = [file for file in os.listdir(source_folder) if file.endswith(FileManager.FILE_EXTENSIONS)]
        for file in files_to_move:
            source_path = os.path.join(source_folder, file)
            destination_path = os.path.join(destination_folder, file)
            shutil.move(source_path, destination_path)
            print(f"Thumbnail '{file}' moved to '{destination_folder}'")
            time.sleep(1)

    @staticmethod
    def remove_ytdl_files(directory: str) -> None:
        files_to_remove = [file for file in os.listdir(directory) if file.endswith('.ytdl')]
        for file in files_to_remove:
            file_path = os.path.join(directory, file)
            os.remove(file_path)


class Validator:
    @staticmethod
    def is_valid_url(url: str) -> bool:
        youtube_url_pattern = re.compile(r'^(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/.*$')
        return bool(re.match(youtube_url_pattern, url))

    @staticmethod
    def is_valid_directory(directory: str) -> bool:
        return os.path.isdir(directory)


class Downloader:
    def __init__(self, logger: logging.Logger):
        self.logger = logger

    def check_yt_dlp_availability(self):
        try:
            subprocess.run(['yt-dlp', '--version'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
            self.logger.info("yt-dlp is installed and available.")
        except subprocess.CalledProcessError:
            self.logger.error("yt-dlp is not installed. Please install it using 'pip install yt-dlp'")
            time.sleep(5)
            sys.exit(YouTubeDownloader.EXIT_YT_DLP_NOT_AVAILABLE)

    def download_video_with_options(self, video_url: str, file_location: str, user_options: Dict[str, str], progress_hook) -> None:
        try:
            ydl_opts = {
                'format': f'bestvideo[ext=mp4]+bestaudio[ext={user_options["audio_format"]}]/bestvideo+bestaudio/{user_options["video_quality"]}',
                'download_archive': 'downloaded_songs.txt',
                'windowsfilenames': True,
                'quiet': False,
                'no_warnings': True,
                'progress_hooks': [progress_hook],
                'outtmpl': os.path.join(file_location, '%(title)s.%(ext)s'),
                'writesubtitles': user_options['subtitles'],
                'subtitleslangs': ['en', '-live_chat'],
                'writethumbnail': True,
                'embedthumbnail': True,
                'ignoreerrors': True,
                "error_logger": self.logger,
                'postprocessors': [
                    {'key': 'FFmpegMetadata', 'add_metadata': True},
                    {'key': 'FFmpegEmbedSubtitle'},
                    {'key': 'EmbedThumbnail', 'already_have_thumbnail': True},
                ],
            }

            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([video_url])

        except yt_dlp.utils.DownloadError as error:
            self.logger.error(f"Error downloading video: {error}")
            print(f"{Tcolors.red}Error: {error}{Tcolors.clear}")
            sys.exit(YouTubeDownloader.EXIT_DOWNLOAD_ERROR)


class UserInputManager:
    @staticmethod
    def get_user_options(default_video_quality, default_audio_format, default_subtitles) -> Dict[str, str]:
        options = {
            'video_quality': input(f"Enter video quality (default: {default_video_quality}): ").strip() or default_video_quality,
            'audio_format': input(f"Enter audio format (default: {default_audio_format}): ").strip() or default_audio_format,
            'subtitles': input("Include subtitles? (y/n, default: y): ").strip().lower() in ['y', 'yes', '']
        }
        return options


class ProgressDisplay:
    @staticmethod
    def progress_hook(d):
        if d['status'] == 'finished':
            print(f"{Tcolors.green}Done downloading, now post-processing...{Tcolors.clear}")
        elif d['status'] == 'downloading':
            print(f"{Tcolors.cyan}Downloading: {d['_percent_str']} at {d['_speed_str']} ETA: {d['_eta_str']}{Tcolors.clear}", end='\r')


class ConsoleManager:
    def __init__(self, downloader: 'YouTubeDownloader'):
        self.downloader = downloader

    def clear_console(self) -> None:
        os.system('cls' if os.name == 'nt' else 'clear')

    def first_clear(self):
        self.clear_console()
        print(f"{Tcolors.bold}YouTube Downloader{Tcolors.clear}")
        print(f"{Tcolors.gray}Written in Python 3.11*")
        print(f"{Tcolors.red}By RhaZenZ0{Tcolors.clear}")
        print("-----------")

    def start_again(self, prev_file_location: str) -> None:
        while True:
            ans = input(f"{Tcolors.cyan}\nDo you want to start again? (y/n) " + Tcolors.clear).strip().lower()
            if ans == "y":
                self.clear_console()
                time.sleep(0)
                self.run(prev_file_location)
            elif ans == 'n':
                self.clear_console()
                self.close()
            else:
                print(f"{Tcolors.red}Please respond with 'Y' or 'N'\n" + Tcolors.clear)

    def close(self) -> None:
        print('\nBye')
        time.sleep(1)
        sys.exit(self.downloader.EXIT_SUCCESS)

    def run(self, prev_file_location: Optional[str] = None) -> None:
        file_location_previous = prev_file_location

        while True:
            try:
                video_url = input(f"{Tcolors.cyan}\nPlease enter a YouTube video URL: {Tcolors.clear}").strip()
                if not Validator.is_valid_url(video_url):
                    print(f"{Tcolors.red}Error: Invalid YouTube video URL{Tcolors.clear}")
                    sys.exit(self.downloader.EXIT_INVALID_URL)

                file_location_prompt = f"Enter file location to save files (default: {file_location_previous}): " if file_location_previous else "Enter file location to save files: "
                file_location = input(f"{Tcolors.cyan}{file_location_prompt}{Tcolors.clear}").strip() or file_location_previous
                file_location = FileManager.sanitize_file_path(file_location)

                if not Validator.is_valid_directory(file_location):
                    print(f"{Tcolors.red}Error: Invalid file location{Tcolors.clear}")
                    sys.exit(self.downloader.EXIT_INVALID_DIRECTORY)

                user_options = UserInputManager.get_user_options(
                    self.downloader.DEFAULT_VIDEO_QUALITY,
                    self.downloader.DEFAULT_AUDIO_FORMAT,
                    self.downloader.DEFAULT_SUBTITLES
                )

                self.downloader.downloader.download_video_with_options(video_url, file_location, user_options, ProgressDisplay.progress_hook)
                FileManager.move_thumbnails(file_location, os.path.join(file_location, 'thumbnails'))
                FileManager.remove_ytdl_files(file_location)
                self.clear_console()
                self.start_again(file_location)

            except Exception as e:
                self.downloader.logger.error(f"An error occurred: {e}")
                print(f"{Tcolors.red}Error: {e}{Tcolors.clear}")
                sys.exit(self.downloader.EXIT_UNKNOWN_ERROR)


class YouTubeDownloader:
    DEFAULT_VIDEO_QUALITY = 'best'
    DEFAULT_AUDIO_FORMAT = 'best'
    DEFAULT_SUBTITLES = True

    # Define exit codes
    EXIT_SUCCESS = 0
    EXIT_INVALID_URL = 1
    EXIT_INVALID_DIRECTORY = 2
    EXIT_YT_DLP_NOT_AVAILABLE = 3
    EXIT_DOWNLOAD_ERROR = 4
    EXIT_UNKNOWN_ERROR = 5

    def __init__(self, logger: logging.Logger):
        self.logger = logger
        self.downloader = Downloader(logger)
        self.downloader.check_yt_dlp_availability()
        self.console_manager = ConsoleManager(self)


if __name__ == '__main__':
    logger_manager = LoggerManager()
    logger = logger_manager.get_logger()
    downloader = YouTubeDownloader(logger)
    downloader.console_manager.first_clear()
    downloader.console_manager.run()
